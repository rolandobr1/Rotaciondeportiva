// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Provides AI-driven team balancing suggestions based on manual assignments.
 *
 * - getTeamRecommendation - A function that takes player assignments and suggests balancing adjustments.
 * - GetTeamRecommendationInput - The input type for the getTeamRecommendation function.
 * - GetTeamRecommendationOutput - The return type for the getTeamRecommendation function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GetTeamRecommendationInputSchema = z.object({
  team1Players: z
    .array(z.object({name: z.string(), winRate: z.number()}))
    .describe('The players currently assigned to team 1, with their win rates.'),
  team2Players: z
    .array(z.object({name: z.string(), winRate: z.number()}))
    .describe('The players currently assigned to team 2, with their win rates.'),
});
export type GetTeamRecommendationInput = z.infer<
  typeof GetTeamRecommendationInputSchema
>;

const GetTeamRecommendationOutputSchema = z.object({
  recommendation: z
    .string()
    .describe(
      'A suggestion on how to balance the teams, considering player win rates. Suggest specific player swaps if necessary.'
    ),
});
export type GetTeamRecommendationOutput = z.infer<
  typeof GetTeamRecommendationOutputSchema
>;

export async function getTeamRecommendation(
  input: GetTeamRecommendationInput
): Promise<GetTeamRecommendationOutput> {
  return getTeamRecommendationFlow(input);
}

const prompt = ai.definePrompt({
  name: 'getTeamRecommendationPrompt',
  input: {schema: GetTeamRecommendationInputSchema},
  output: {schema: GetTeamRecommendationOutputSchema},
  prompt: `You are an AI assistant that helps balance teams in a game.

  Based on the current team compositions and player win rates, suggest a way to balance the teams.
  Consider suggesting specific player swaps between teams if necessary to achieve a better balance.

  Team 1 Players:
  {{#each team1Players}}
  - {{name}} (Win Rate: {{winRate}})
  {{/each}}

  Team 2 Players:
  {{#each team2Players}}
  - {{name}} (Win Rate: {{winRate}})
  {{/each}}
  `,
});

const getTeamRecommendationFlow = ai.defineFlow(
  {
    name: 'getTeamRecommendationFlow',
    inputSchema: GetTeamRecommendationInputSchema,
    outputSchema: GetTeamRecommendationOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
